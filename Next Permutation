// http://judge.telerikacademy.com/problem/02nextpermutation

const size = +gets();
const input = gets().split(' ').map(Number);

const nextPermutation = (array, length) => {
  let i = length - 1; // start backwards (iterate from right to left)
  let j = length - 1; // declare in local scope to use later in swapping

  for (i = length - 1; array[i] <= array[i - 1]; i -= 1) {
    if (i <= 0) {
      return false; // terminate
    }
  }

  for (j = length - 1; array[j] <= array[i - 1]; j -= 1) {
    continue; // just decrement j
  }

  // swap last values that are true for the above conditions
  // this will form half of our next permutation
  [array[i - 1], array[j]] = [array[j], array[i - 1]];

  // reassign j to starting index again
  // i is okay because everything up to i is well formated(this half of i is ok)
  j = length - 1;
  while (i < j) { // adjust other half and our next permutation is found
      [array[i], array[j]] = [array[j], array[i]];
      i++;
      j--;
  }

  return array;
};

const result = nextPermutation(input, size);
print(result.join(' '));
