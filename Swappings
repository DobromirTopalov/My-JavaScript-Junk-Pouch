// http://judge.telerikacademy.com/problem/01swappings

class Node {
  constructor(value, prev) {
    this.value = value;
    this.prev = prev;
    this.next = null || null;

    if (prev) {
      prev.next = this;
    }
  }

  * [Symbol.iterator]() {
    let current = this;
    while (current) {
      yield current.value;
      current = current.next;
    }    
  }

  static detach(node) {
    if (node.prev) {
      node.prev.next = null;
    }

    if (node.next) {
      node.next.prev = null;
    }

    node.prev = null;
    node.next = null;
  }

  static attach(left, right) {
    if ( left === right ) {
      return;
    }

    left.next = right;
    right.prev = left;
  }
}

const n = +gets();
const swappingNums = gets().split(' ').map(Number);

const arr = Array.from( { length: n + 1 } );

for (let i = 1; i <= n; i += 1) {
  const node = new Node(i, arr[i - 1]);
  arr[i] = node;
}

let leftEnd = arr[1];
let rightEnd = arr[n];

swappingNums.forEach((element) => {
  const middle = arr[element];
  const newLeftEnd = middle.next;
  const newRightEnd = middle.prev;

  Node.detach(middle);
  Node.attach(middle, leftEnd);
  Node.attach(rightEnd, middle);

  leftEnd = newLeftEnd || middle;
  rightEnd = newRightEnd || middle;
});

const result = [];
let current = leftEnd;
while (current) {
  result.push(current.value);
  current = current.next;
}

//print(result);
print([...leftEnd].join(' '));
